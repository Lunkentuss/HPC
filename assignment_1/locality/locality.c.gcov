        -:    0:Source:locality.c
        -:    0:Graph:locality.gcno
        -:    0:Data:locality.gcda
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:#define MATRIX_TYPE_ENUM 1 // Create matrix of type double
        -:    5:#include <matrix.h>
        -:    6:
        -:    7:#define SIZE 100
        -:    8:
        -:    9:/* Prints a vector of type MATRIX_TYPE */
    #####:   10:void vec_print(MATRIX_TYPE * vec, int count) {
    #####:   11:    for (int i = 0 ; i < count ; i++) {
    #####:   12:        printf("%lf ", vec[i]);
        -:   13:    }
    #####:   14:    printf("\n");
    #####:   15:}
        -:   16:
        -:   17:/* Insert any matrix values */
        -:   18:void
    #####:   19:mult_table(struct matrix * mat) {
    #####:   20:    for(int i = 0 ; i < mat->m ; i++){
    #####:   21:        for(int j = 1 ; j < mat->n ; j++){
    #####:   22:            mat->as[i][j] = (MATRIX_TYPE)i * j;
        -:   23:        }
        -:   24:    }
    #####:   25:}
        -:   26:
        -:   27:/* Calculates row sum of a matrix*/
        -:   28:void
    #####:   29:row_sums(
        -:   30:  double * sums,
        -:   31:  const double ** matrix,
        -:   32:  size_t nrs,
        -:   33:  size_t ncs
        -:   34:)
        -:   35:{
    #####:   36:  for ( size_t ix=0; ix < nrs; ++ix ) {
    #####:   37:    double sum = 0;
    #####:   38:    for ( size_t jx=0; jx < ncs; ++jx )
    #####:   39:      sum += matrix[ix][jx];
    #####:   40:    sums[ix] = sum;
        -:   41:  }
    #####:   42:}
        -:   43:
        -:   44:/* Calculates column sum of a matrix*/
        -:   45:void
    #####:   46:col_sums(
        -:   47:  double * sums,
        -:   48:  const double ** matrix,
        -:   49:  size_t nrs,
        -:   50:  size_t ncs
        -:   51:  )
        -:   52:{
    #####:   53:  for ( size_t jx=0; jx < ncs; ++jx ) {
    #####:   54:    double sum = 0;
    #####:   55:    for ( size_t ix=0; ix < nrs; ++ix )
    #####:   56:      sum += matrix[ix][jx];
    #####:   57:    sums[jx] = sum;
        -:   58:  }
    #####:   59:}
        -:   60:
        -:   61:/* Calculates column sum of a matrix less naive way*/
        -:   62:void
    #####:   63:col_sums_new(
        -:   64:  double * sums,
        -:   65:  const double ** matrix,
        -:   66:  size_t nrs,
        -:   67:  size_t ncs
        -:   68:  )
        -:   69:{
    #####:   70:    for ( size_t ix=0; ix < nrs; ++ix ){
    #####:   71:        for ( size_t jx=0; jx < ncs; ++jx ) {
    #####:   72:            sums[jx] += matrix[ix][jx];
        -:   73:        }
        -:   74:    }
    #####:   75:}
        -:   76:
        -:   77:int
    #####:   78:main(int argc, char ** argv) {
        -:   79:    // Init and insert values
    #####:   80:    struct matrix * mat = matrix_init(SIZE, SIZE);
    #####:   81:    mult_table(mat);
        -:   82:
        -:   83:    // Calculate row and column sums
    #####:   84:    double * sum_rows = (double *)malloc(sizeof(double) * SIZE);
    #####:   85:    double * sum_cols = (double *)malloc(sizeof(double) * SIZE);
        -:   86:    /* row_sums(sum_rows, (const double **)mat->as, SIZE, SIZE); */
        -:   87:    /* col_sums(sum_cols, (const double **)mat->as, SIZE, SIZE); */
    #####:   88:    col_sums_new(sum_cols, (const double **)mat->as, SIZE, SIZE);
        -:   89:
        -:   90:    // print
        -:   91:    /* vec_print(sum_rows, SIZE); */
        -:   92:    /* printf("\n\n"); */
        -:   93:    /* vec_print(sum_cols, SIZE); */
        -:   94:    /* printf("\n\n"); */
        -:   95:    /* matrix_print(mat); */
    #####:   96:    return(0);
        -:   97:}
