        -:    0:Source:locality.c
        -:    0:Graph:locality.gcno
        -:    0:Data:locality.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:#define MATRIX_TYPE double
        -:    5:#include <matrix.h>
        -:    6:
        -:    7:#define SIZE 100
        -:    8:
        -:    9:/* Prints a vector of type MATRIX_TYPE */
        2:   10:void vec_print(MATRIX_TYPE * vec, int count) {
      202:   11:    for (int i = 0 ; i < count ; i++) {
      200:   12:        printf("%lf ", vec[i]);
        -:   13:    }
        2:   14:    printf("\n");
        2:   15:}
        -:   16:
        -:   17:/* Insert any matrix values */
        -:   18:void
        1:   19:mult_table(struct matrix * mat) {
      101:   20:    for(int i = 0 ; i < mat->m ; i++){
    10000:   21:        for(int j = 1 ; j < mat->n ; j++){
     9900:   22:            mat->as[i][j] = (MATRIX_TYPE)i * j;
        -:   23:        }
        -:   24:    }
        1:   25:}
        -:   26:
        -:   27:/* Calculates row sum of a matrix*/
        -:   28:void
        1:   29:row_sums(
        -:   30:  double * sums,
        -:   31:  const double ** matrix,
        -:   32:  size_t nrs,
        -:   33:  size_t ncs
        -:   34:)
        -:   35:{
      101:   36:  for ( size_t ix=0; ix < nrs; ++ix ) {
      100:   37:    double sum = 0;
    10100:   38:    for ( size_t jx=0; jx < ncs; ++jx )
    10000:   39:      sum += matrix[ix][jx];
      100:   40:    sums[ix] = sum;
        -:   41:  }
        1:   42:}
        -:   43:
        -:   44:/* Calculates column sum of a matrix*/
        -:   45:void
        1:   46:col_sums(
        -:   47:  double * sums,
        -:   48:  const double ** matrix,
        -:   49:  size_t nrs,
        -:   50:  size_t ncs
        -:   51:  )
        -:   52:{
      101:   53:  for ( size_t jx=0; jx < ncs; ++jx ) {
      100:   54:    double sum = 0;
    10100:   55:    for ( size_t ix=0; ix < nrs; ++ix )
    10000:   56:      sum += matrix[ix][jx];
      100:   57:    sums[jx] = sum;
        -:   58:  }
        1:   59:}
        -:   60:
        -:   61:/* Calculates column sum of a matrix less naive way*/
        -:   62:void
        1:   63:col_sums_new(
        -:   64:  double * sums,
        -:   65:  const double ** matrix,
        -:   66:  size_t nrs,
        -:   67:  size_t ncs
        -:   68:  )
        -:   69:{
      101:   70:    for ( size_t ix=0; ix < nrs; ++ix ){
    10100:   71:        for ( size_t jx=0; jx < ncs; ++jx ) {
    10000:   72:            sums[jx] += matrix[ix][jx];
        -:   73:        }
        -:   74:    }
        1:   75:}
        -:   76:
        -:   77:int
        1:   78:main(int argc, char ** argv) {
        -:   79:    // Init and insert values
        1:   80:    struct matrix * mat = matrix_init(SIZE, SIZE);
        1:   81:    mult_table(mat);
        -:   82:
        -:   83:    // Calculate row and column sums
        1:   84:    double * sum_rows = (double *)malloc(sizeof(double) * SIZE);
        1:   85:    double * sum_cols = (double *)malloc(sizeof(double) * SIZE);
        1:   86:    row_sums(sum_rows, (const double **)mat->as, SIZE, SIZE);
        1:   87:    col_sums(sum_cols, (const double **)mat->as, SIZE, SIZE);
        1:   88:    col_sums_new(sum_cols, (const double **)mat->as, SIZE, SIZE);
        -:   89:
        -:   90:    // print
        1:   91:    vec_print(sum_rows, SIZE);
        1:   92:    printf("\n\n");
        1:   93:    vec_print(sum_cols, SIZE);
        1:   94:    printf("\n\n");
        1:   95:    matrix_print(mat);
        1:   96:    return(0);
        -:   97:}
