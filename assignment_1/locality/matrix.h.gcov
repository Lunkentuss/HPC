        -:    0:Source:util/matrix.h
        -:    0:Graph:locality.gcno
        -:    0:Data:locality.gcda
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#ifndef MATRIX_H
        -:    2:# define MATRIX_H
        -:    3:
        -:    4:#include <stdbool.h>
        -:    5:
        -:    6:#define MATRIX_TYPE_INT 0
        -:    7:#define MATRIX_TYPE_DOUBLE 1
        -:    8:
        -:    9:#ifndef MATRIX_TYPE_ENUM
        -:   10:    #define MATRIX_TYPE int
        -:   11:    #define MATRIX_TYPE_STR "d"
        -:   12:
        -:   13:#elif MATRIX_TYPE_ENUM == MATRIX_TYPE_INT
        -:   14:    #define MATRIX_TYPE int
        -:   15:    #define MATRIX_TYPE_STR "d"
        -:   16:
        -:   17:#elif MATRIX_TYPE_ENUM == MATRIX_TYPE_DOUBLE
        -:   18:    #define MATRIX_TYPE double
        -:   19:    #define MATRIX_TYPE_STR "lf"
        -:   20:
        -:   21:#endif //MATRIX_TYPE
        -:   22:
        -:   23:struct matrix{
        -:   24:    MATRIX_TYPE * asentries;
        -:   25:    MATRIX_TYPE ** as;
        -:   26:    int m;
        -:   27:    int n;
        -:   28:};
        -:   29:
    #####:   30:struct matrix * matrix_init(int m, int n)
        -:   31:{
    #####:   32:    struct matrix * mat = (struct matrix *)malloc(sizeof(struct matrix));
    #####:   33:    MATRIX_TYPE * asentries = (MATRIX_TYPE *)malloc(sizeof(MATRIX_TYPE) * m * n);
    #####:   34:    MATRIX_TYPE ** as = (MATRIX_TYPE **)malloc(sizeof(MATRIX_TYPE *) * m);
        -:   35:
    #####:   36:    for(int ix = 0, jx = 0 ; ix < m ; ix++, jx+=n)
    #####:   37:        as[ix] = asentries + jx;
        -:   38:
    #####:   39:    mat->as = as;
    #####:   40:    mat->asentries = asentries;
    #####:   41:    mat->m = m;
    #####:   42:    mat->n = n;
        -:   43:
    #####:   44:    return(mat);
        -:   45:};
        -:   46:
    #####:   47:bool matrix_equal(struct matrix * mat1, struct matrix * mat2) {
    #####:   48:    if (mat1->m != mat2->m) {
    #####:   49:        return(false);
        -:   50:    }
        -:   51:
    #####:   52:    if (mat1->n != mat2->n) {
    #####:   53:        return(false);
        -:   54:    }
        -:   55:
    #####:   56:    for (int i = 0 ; i < mat1->m ; i++) {
    #####:   57:        for (int j = 0 ; j < mat2->n ; j++) {
    #####:   58:            if (mat1->as[i][j] != mat2->as[i][j]){
    #####:   59:                return(false);
        -:   60:            }
        -:   61:        }
        -:   62:    }
        -:   63:
    #####:   64:    return(true);
        -:   65:}
        -:   66:
    #####:   67:void matrix_print(struct matrix * mat) {
    #####:   68:    for (int i = 0 ; i < mat->m ; i++) {
    #####:   69:        for (int j = 0 ; j < mat->n ; j++) {
    #####:   70:            printf("%" MATRIX_TYPE_STR " ", mat->as[i][j]);
        -:   71:        }
    #####:   72:        printf("\n");
        -:   73:    }
    #####:   74:    return;
        -:   75:}
        -:   76:
    #####:   77:void matrix_free(struct matrix * mat){
    #####:   78:    free(mat->asentries);
    #####:   79:    free(mat->as);
        -:   80:
    #####:   81:    return;
        -:   82:}
        -:   83:
    #####:   84:void write_matrix(FILE * fp, struct matrix * mat)
        -:   85:{
    #####:   86:    fwrite(&mat->m, sizeof(int), 1, fp);
    #####:   87:    fwrite(&mat->n, sizeof(int), 1, fp);
        -:   88:
    #####:   89:    fwrite(*mat->as, sizeof(int), mat->m * mat->n, fp);
    #####:   90:    return;
        -:   91:}
        -:   92:
    #####:   93:struct matrix * read_matrix(FILE * fp)
        -:   94:{
        -:   95:    int m, n;
        -:   96:
    #####:   97:    fread(&m, sizeof(int), 1, fp);
    #####:   98:    fread(&n, sizeof(int), 1, fp);
        -:   99:
    #####:  100:    struct matrix * mat = matrix_init(m, n);
    #####:  101:    fread(*mat->as, sizeof(int), m * n, fp);
        -:  102:
    #####:  103:    return(mat);
        -:  104:}
        -:  105:
        -:  106:#endif /* MATRIX_H */
